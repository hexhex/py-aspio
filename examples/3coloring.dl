%! INPUT (nodes: Iterable[Node], edges: Mapping[Node, Iterable[Node]]) {
%!     node(n.label) for n in nodes;
%!     edge(n.label, m.label) for (n, neighbors) in mapping edges for m in neighbors;
%! }

%! OUTPUT {
%!  num = 25,
%!  simple_edges = set { edge },
%!  s = "string literal",
%!  color = set { color },
%!  color2 = set {
%!      predicate: color(X, C);
%!      content: (X, C, set { predicate: edge(X, Y); content: (Y); });
%!  }
%! }

color(X, red) v color(X, green) v color(X, blue) :- node(X).

:- edge(X, Y), color(X, C), color(Y, C).
